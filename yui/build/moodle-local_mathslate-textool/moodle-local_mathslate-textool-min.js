YUI.add("moodle-local_mathslate-textool",function(e,t){M.local_mathslate=M.local_mathslate||{},M.local_mathslate.TeXTool=function(t,n){var r=e.Node.create('<input type="text">'),i=e.Node.create("<span>\\( \\)</span>");n&&i.on("click",function(){n(i.json)}),e.one(t).appendChild(r),e.one(t).appendChild(i),r.focus();var s=new e.DD.Drag({node:i});s.on("drag:end",function(){this.get("node").setStyle("top","0"),this.get("node").setStyle("left","0")}),r.on("change",function(){function o(){var n=MathJax.Hub.getAllJax(i.generateID())[0].root.toMathML();n=n.replace(/.*<math xmlns=\"http:\/\/www.w3.org\/1998\/Math\/MathML\">\s*/,"[").replace(/\s*<\/math.*/,"]");if(/<mtext mathcolor="red">/.test(n)||/<merror/.test(n)){console.log(n),t=[""],i.json='["",{},""]',i.setHTML("Unrecognized Expression");return}t=n.replace("<mrow>",'["mrow",{"tex": "'+r.getDOMNode().value+'"},['),t=t.replace(/ class="[^"]*"/g,""),["mrow","mfrac","msub","msup","msubsup","munder","mover","munderover","msqrt","mroot"].forEach(function(e){t=t.replace(new RegExp("<"+e+">","g"),'["'+e+'",{},[').replace(new RegExp("</"+e+">","g"),"]],")}),t=t.replace(/<mo stretchy="false">/g,'["mo",{"stretchy": "false"},"'),["mo","mi","mn","mtext"].forEach(function(e){t=t.replace(new RegExp("<"+e+">","g"),'["'+e+'",{},"').replace(new RegExp("</"+e+">","g"),'"],')}),t=t.replace(/<mi mathvariant="([a-z]*)">/g,'["mi",{"mathvariant": "$1"},"'),t=t.replace(/<mstyle displaystyle="true">/g,'["mstyle",{"displaystyle": "true"},[').replace(/<\/mstyle>/g,"]]"),t=t.replace(/,\s*\]/g,"]"),t=t.replace(/\\/g,"\\\\"),t=t.replace(/<!--.*?-->/g,""),t=t.replace(/&#x([\dA-F]{4});/g,"\\u$1"),t='["mrow", {"tex":["'+r.getDOMNode().value.replace(/\\/g,"\\\\")+'"]},'+t+"]",i.json=t,/</.test(t)&&(console.log(t),i.json='["",{},""]'),t=[e.JSON.parse(t)],i.setHTML("")}i.setHTML("<span>\\("+r.getDOMNode().value+"\\)</span>"),MathJax.Hub.Queue(["Typeset",MathJax.Hub,i.generateID()]);var t;MathJax.Hub.Queue(o),MathJax.Hub.Queue(["addElement",MathJax.HTML,i.getDOMNode(),"span",{},[["math",{},t]]]),MathJax.Hub.Queue(["Typeset",MathJax.Hub,i.generateID()]),MathJax.Hub.Queue(function(){s.set("data",i.json),n(i.json)})})}},"@VERSION@",{requires:["dd-drag","dd-proxy","dd-drop","event","json"]});
